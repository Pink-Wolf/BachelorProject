{
  "type": "class",

  "declaration": "class gpu_vkBuffer_allocator;",
  "namespace": "CompWolf",
  "briefDescription": "A [[base_gpu_buffer_allocator]] which allocates a vulkan_buffer, representing a VkBuffer.",
  "detailedDescription": "A [[base_gpu_buffer_allocator]] which allocates a vulkan_buffer, representing a VkBuffer.\nMost gpu data is contained in a buffer, and so most uses this allocator (though for example an image uses [[gpu_image_allocator]]).",

  "warnings": [
    "This reveals a lower level of abstractions, and so this should rarely be used directly."
  ],

  "baseClasses": [ "base_gpu_buffer_allocator" ],

  "copyable": true,
  "movable": true,
  "constructor": {
    "overloads": [
      {
        "declaration": "gpu_vkBuffer_allocator() noexcept;",
        "description": "Constructs a freed gpu_vkBuffer_allocator, as in one that cannot be used to allocate memory."
      },
      {
        "declaration": "gpu_vkBuffer_allocator(gpu_connection&, gpu_vkBuffer_type, std::size_t size, std::size_t element_stride) noexcept;",
        "description": "Constructs a gpu_vkBuffer_allocator that will allocate the given amount of elements, each with the given byte-size, on the given gpu."
      },
      {
        "declaration": "gpu_vkBuffer_allocator(const gpu_vkBuffer_allocator&) noexcept;",
        "description": "gpu_vkBuffer_allocator is copyable."
      },
      {
        "declaration": "gpu_vkBuffer_allocator(gpu_vkBuffer_allocator&&) noexcept;",
        "description": "gpu_vkBuffer_allocator is movable."
      }
    ],
    "related": [
      "gpu_connection",
      "gpu_vkBuffer_type"
    ]
  },
  "memberGroups": [
    {
      "name": "Accessors",
      "items": [
        {
          "type": "function",
          "name": "size",
          "briefDescription": "Returns the amount of elements that the allocator allocates with alloc_data.",
          "overloads": [
            {
              "declaration": "auto size() const noexcept -> std::size_t",
              "description": "Returns the amount of elements that the allocator allocates with alloc_data."
            }
          ]
        },
        {
          "type": "function",
          "name": "element_stride",
          "briefDescription": "Returns the byte-size of each element that the allocator allocates with alloc_data.",
          "overloads": [
            {
              "declaration": "auto element_stride() const noexcept -> std::size_t",
              "description": "Returns the byte-size of each element that the allocator allocates with alloc_data."
            }
          ]
        },
        {
          "type": "function",
          "name": "type",
          "briefDescription": "Returns the [[gpu_vkBuffer_type]] that this allocator is.",
          "overloads": [
            {
              "declaration": "auto type() const noexcept -> gpu_vkBuffer_type",
              "description": "Returns the [[gpu_vkBuffer_type]] that this allocator is."
            }
          ]
        }
      ]
    },
    {
      "name": "Pure functions",
      "items": [
        {
          "type": "function",
          "name": "from_buffer",
          "briefDescription": "Converts a vulkan_buffer into a data_handle.",
          "overloads": [
            {
              "declaration": "auto from_buffer(Private::vulkan_buffer) const noexcept -> data_handle",
              "description": "Converts a vulkan_buffer into a data_handle."
            }
          ]
        },
        {
          "type": "function",
          "name": "to_buffer",
          "briefDescription": "Converts a data_handle into a vulkan_buffer.",
          "overloads": [
            {
              "declaration": "auto to_buffer(data_handle) const noexcept -> Private::vulkan_buffer",
              "description": "Converts a data_handle into a vulkan_buffer."
            }
          ],
          "warnings": [
            "The data_handle must be from the allocator owning this method. If not, this has undefined behaviour."
          ]
        }
      ]
    }
  ]
}