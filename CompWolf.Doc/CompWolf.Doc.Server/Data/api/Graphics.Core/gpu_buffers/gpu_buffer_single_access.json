{
  "type": "class",

  "declaration": "template <typename ValueType> class gpu_buffer_access;",
  "namespace": "CompWolf",
  "briefDescription": "A smart-pointer to a [[base_gpu_buffer]]'s memory.",
  "detailedDescription": "A smart-pointer to a [[base_gpu_buffer]]'s memory. That is, one that on construction gets cpu-access to the buffer's data, and on destruction/freeing releases the access.\nThe buffer this accesses must only contain 1 element.",

  "copyable": false,
  "movable": true,
  "constructor": {
    "overloads": [
      {
        "declaration": "gpu_buffer_access() noexcept;",
        "description": "Constructs a freed gpu_buffer_access, as in one that has already released its access to any buffer."
      },
      {
        "declaration": "explicit gpu_buffer_access(base_gpu_buffer&);",
        "description": "Constructs a gpu_buffer_access that gives access to the given buffer's data."
      },
      {
        "declaration": "gpu_buffer_access(gpu_buffer_access&&) noexcept;",
        "description": "gpu_buffer_access is movable."
      }
    ],
    "exceptions": [
      "Throws std::invalid_argument if the given buffer has more than 1 element.",
      "Throws std::runtime_error if there was an error getting cpu-access to the data due to causes outside of the program."
    ],
    "warnings": [
      "It is undefined behaviour for the given buffer to contain data of a type other than value_type."
    ]
  },
  "memberGroups": [
    {
      "name": "Type Definitions",
      "items": [
        {
          "type": "alias",
          "name": "value_type",
          "declaration": "using value_type = VertexType;",
          "briefDescription": "The type of data in the buffer.",
          "detailedDescription": "The type of data in the buffer."
        }
      ]
    },
    {
      "name": "Accessors",
      "items": [
        {
          "type": "function",
          "name": "target_buffer",
          "briefDescription": "Returns the buffer whose data this accesses.",
          "overloads": [
            {
              "declaration": "auto target_buffer() noexcept -> base_gpu_buffer*",
              "description": "Returns the buffer whose data this accesses."
            },
            {
              "declaration": "auto target_buffer() const noexcept -> const base_gpu_buffer&",
              "description": "Like (1), but const."
            }
          ],
          "related": [
            "base_gpu_buffer"
          ]
        }
      ]
    },
    {
      "name": "Operators",
      "items": [
        {
          "type": "function",
          "name": "operator->",
          "briefDescription": "The accessor points to an element of type value_type.",
          "overloads": [
            {
              "declaration": "auto operator->() noexcept -> value_type*",
              "description": "The accessor points to an element of type value_type."
            },
            {
              "declaration": "auto operator->() const noexcept -> const value_type&",
              "description": "Like (1), but const."
            }
          ]
        },
        {
          "type": "function",
          "name": "operator*",
          "briefDescription": "The accessor points to an element of type value_type.",
          "overloads": [
            {
              "declaration": "auto operator*() noexcept -> value_type&",
              "description": "The accessor points to an element of type value_type."
            },
            {
              "declaration": "auto operator*() const noexcept -> const value_type&",
              "description": "Like (1), but const."
            }
          ]
        }
      ]
    }
  ]
}