{
  "type": "class",

  "declaration": "class gpu_image_allocator;",
  "namespace": "CompWolf",
  "briefDescription": "A [[base_gpu_buffer_allocator]] which allocates a vulkan_image, representing a VkImage.",
  "detailedDescription": "A [[base_gpu_buffer_allocator]] which allocates a vulkan_image, representing a VkImage.",

  "warnings": [
    "This reveals a lower level of abstractions, and so this should rarely be used directly."
  ],

  "baseClasses": [ "base_gpu_buffer_allocator" ],

  "copyable": true,
  "movable": true,
  "constructor": {
    "overloads": [
      {
        "declaration": "gpu_image_allocator() noexcept;",
        "description": "Constructs a freed gpu_image_allocator, as in one that cannot be used to allocate memory."
      },
      {
        "declaration": "gpu_image_allocator(gpu_connection&, int width, int height);",
        "description": "Constructs a gpu_image_allocator that will allocate an image with the given width and height in pixels, on the given gpu."
      },
      {
        "declaration": "gpu_image_allocator(const gpu_image_allocator&) noexcept;",
        "description": "gpu_image_allocator is copyable."
      },
      {
        "declaration": "gpu_image_allocator(gpu_image_allocator&&) noexcept;",
        "description": "gpu_image_allocator is movable."
      }
    ],
    "exceptions": [
      "Throws std::domain_error if the given width or height is non-positive."
    ]
  },
  "memberGroups": [
    {
      "name": "Type Definitions",
      "items": [
        {
          "type": "alias",
          "name": "value_type",
          "declaration": "using value_type = transparent_color;",
          "briefDescription": "The type of pixels making up the image that the allocator allocates with alloc_data.",
          "detailedDescription": "The type of pixels making up the image that the allocator allocates with alloc_data.",
          "related": [ "transparent_color" ]
        }
      ]
    },
    {
      "name": "Accessors",
      "items": [
        {
          "type": "function",
          "name": "width",
          "briefDescription": "Returns the width of the image that the allocator allocates with alloc_data.",
          "overloads": [
            {
              "declaration": "auto width() const noexcept -> int",
              "description": "Returns the width of the image that the allocator allocates with alloc_data."
            }
          ]
        },
        {
          "type": "function",
          "name": "height",
          "briefDescription": "Returns the height of the image that the allocator allocates with alloc_data.",
          "overloads": [
            {
              "declaration": "auto height() const noexcept -> int",
              "description": "Returns the height of the image that the allocator allocates with alloc_data."
            }
          ]
        }
      ]
    },
    {
      "name": "Pure functions",
      "items": [
        {
          "type": "function",
          "name": "from_image",
          "briefDescription": "Converts a vulkan_image into a data_handle.",
          "overloads": [
            {
              "declaration": "auto from_image(Private::vulkan_image) const noexcept -> data_handle",
              "description": "Converts a vulkan_image into a data_handle."
            }
          ]
        },
        {
          "type": "function",
          "name": "to_image",
          "briefDescription": "Converts a data_handle into a vulkan_image.",
          "overloads": [
            {
              "declaration": "auto to_image(data_handle) const noexcept -> Private::vulkan_image",
              "description": "Converts a data_handle into a vulkan_image."
            }
          ],
          "warnings": [
            "The data_handle must be from the allocator owning this method. If not, this has undefined behaviour."
          ]
        }
      ]
    }
  ]
}