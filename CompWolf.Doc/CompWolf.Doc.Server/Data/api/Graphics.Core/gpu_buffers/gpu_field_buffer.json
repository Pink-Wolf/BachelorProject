{
  "type": "class",

  "declaration": "template <ShaderField ValueType> class gpu_field_buffer;",
  "namespace": "CompWolf",
  "briefDescription": "Contains field-data for one or more [[shader]]s.",
  "detailedDescription": "Contains field-data for one or more [[shader]]s. If the data is an image, [[gpu_image_buffer]] should be used instead.",

  "templateParameters": [
    {
      "name": "ValueType",
      "description": "The type of data in the buffer. value_type is set to this type."
    }
  ],

  "baseClasses": [ "base_gpu_buffer" ],

  "copyable": false,
  "movable": true,
  "constructor": {
    "overloads": [
      {
        "declaration": "gpu_field_buffer() noexcept;",
        "description": "Constructs a freed gpu_field_buffer, as in one that has no data."
      },
      {
        "declaration": "gpu_field_buffer(gpu_connection&, std::size_t size);",
        "description": "Constructs a gpu_field_buffer on the given gpu, with the given amount of elements."
      },
      {
        "declaration": "gpu_field_buffer(gpu_connection&, std::initializer_list<value_type>);",
        "description": "Constructs a gpu_field_buffer on the given gpu, with the given data."
      },
      {
        "declaration": "gpu_field_buffer(gpu_connection&, value_type);",
        "description": "Constructs a gpu_field_buffer on the given gpu, with the given data."
      },
      {
        "declaration": "gpu_field_buffer(gpu_field_buffer&&) noexcept;",
        "description": "gpu_field_buffer is movable."
      }
    ],
    "exceptions": [
      "Throws std::runtime_error if there was an error during allocation due to causes outside of the program, including the gpu not having space."
    ]
  },
  "memberGroups": [
    {
      "name": "Type Definitions",
      "items": [
        {
          "type": "alias",
          "name": "value_type",
          "declaration": "using value_type = std::remove_cvref<VertexType>;",
          "briefDescription": "The type of data in the buffer.",
          "detailedDescription": "The type of data in the buffer."
        }
      ]
    },
    {
      "name": "Accessors",
      "items": [
        {
          "type": "function",
          "name": "data",
          "briefDescription": "Returns a [[gpu_buffer_access]] to read and modify the buffer's data.",
          "overloads": [
            {
              "declaration": "auto data() -> gpu_buffer_access<value_type>",
              "description": "Returns a [[gpu_buffer_access]] to read and modify the buffer's data."
            }
          ],
          "exceptions": [
            "Throws std::runtime_error if there was an error getting cpu-access to the data due to causes outside of the program."
          ],
          "related": [
            "gpu_buffer_access"
          ]
        },
        {
          "type": "function",
          "name": "single_data",
          "briefDescription": "Returns a [[gpu_buffer_single_access]] to read and modify the buffer's data.",
          "overloads": [
            {
              "declaration": "auto single_data() -> gpu_buffer_single_access<value_type>",
              "description": "Returns a [[gpu_buffer_single_access]] to read and modify the buffer's data."
            }
          ],
          "exceptions": [
            "Throws std::invalid_argument if the buffer has more than 1 element.",
            "Throws std::runtime_error if there was an error getting cpu-access to the data due to causes outside of the program."
          ],
          "related": [
            "gpu_buffer_single_access"
          ]
        }
      ]
    },
    {
      "name": "Vulkan-related",
      "description": "These members reveal a lower level of abstractions, and so they should rarely be used.",
      "items": [
        {
          "type": "function",
          "name": "vulkan_allocator",
          "briefDescription": "Returns the allocator used to allocate the buffer.",
          "overloads": [
            {
              "declaration": "auto vulkan_allocator() noexcept -> gpu_vkBuffer_allocator",
              "description": "Returns the allocator used to allocate the buffer."
            },
            {
              "declaration": "auto vulkan_allocator() const noexcept -> const gpu_vkBuffer_allocator",
              "description": "Like (1), but const."
            }
          ],
          "related": [ "gpu_vkBuffer_allocator" ]
        },
        {
          "type": "function",
          "name": "vulkan_buffer",
          "briefDescription": "Returns the buffer's vulkan_buffer, representing a VkBuffer.",
          "overloads": [
            {
              "declaration": "auto vulkan_buffer() const noexcept -> Private::vulkan_buffer;",
              "description": "Returns the buffer's vulkan_buffer, representing a VkBuffer."
            }
          ]
        }
      ]
    }
  ]
}