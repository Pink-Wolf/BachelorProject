{
  "type": "class",

  "declaration": "class base_gpu_buffer;",
  "namespace": "CompWolf",
  "briefDescription": "Base, abstract class for handling some memory on a gpu.",
  "detailedDescription": "Base, abstract class for handling some memory on a gpu.",

  "baseClasses": [ "basic_freeable" ],

  "copyable": false,
  "movable": true,
  "constructor": {
    "overloads": [
      {
        "declaration": "base_gpu_buffer() noexcept;",
        "description": "Constructs a freed base_gpu_buffer, as in one that cannot be used to allocate memory."
      },
      {
        "declaration": "base_gpu_buffer(base_gpu_buffer_allocator*);",
        "description": "Constructs a base_gpu_buffer that uses the given allocator."
      },
      {
        "declaration": "template <typename ValueType> base_gpu_buffer(base_gpu_buffer_allocator*, std::initializer_list<ValueType>);",
        "description": "Constructs a base_gpu_buffer that uses the given allocator, with the given data."
      },
      {
        "declaration": "base_gpu_buffer(base_gpu_buffer&&) noexcept;",
        "description": "base_gpu_buffer is movable."
      }
    ]
  },
  "memberGroups": [
    {
      "name": "Accessors",
      "items": [
        {
          "type": "function",
          "name": "gpu",
          "briefDescription": "Returns the gpu that the buffer is on.",
          "overloads": [
            {
              "declaration": "auto gpu() noexcept -> gpu_connection&",
              "description": "Returns the gpu that the buffer is on."
            },
            {
              "declaration": "auto gpu() const noexcept -> const gpu_connection&",
              "description": "Like (1), but const."
            }
          ],
          "related": [
            "gpu_connection"
          ]
        },
        {
          "type": "function",
          "name": "size",
          "briefDescription": "Returns the amount of elements in the buffer.",
          "overloads": [
            {
              "declaration": "auto size() const noexcept -> std::size_t",
              "description": "Returns the amount of elements in the buffer."
            }
          ]
        }
      ]
    },
    {
      "name": "Vulkan-related",
      "description": "These members reveal a lower level of abstractions, and so they should rarely be used.",
      "items": [
        {
          "type": "function",
          "name": "vulkan_allocator",
          "briefDescription": "Returns the allocator used to allocate the buffer.",
          "overloads": [
            {
              "declaration": "auto vulkan_allocator() noexcept -> base_gpu_buffer_allocator*",
              "description": "Returns the allocator used to allocate the buffer."
            },
            {
              "declaration": "auto vulkan_allocator() const noexcept -> const base_gpu_buffer_allocator*",
              "description": "Like (1), but const."
            }
          ],
          "related": [ "base_gpu_buffer_allocator" ]
        },
        {
          "type": "function",
          "name": "vulkan_memory",
          "briefDescription": "Returns the buffer's vulkan_memory, representing a VkDeviceMemory.",
          "overloads": [
            {
              "declaration": "auto vulkan_memory() const noexcept -> Private::vulkan_memory;",
              "description": "Returns the buffer's vulkan_memory, representing a VkDeviceMemory."
            }
          ]
        },
        {
          "type": "function",
          "name": "vulkan_memory_size",
          "briefDescription": "Returns the size of the vulkan_memory.",
          "overloads": [
            {
              "declaration": "auto vulkan_memory_size() const noexcept -> std::size_t",
              "description": "Returns the size of the vulkan_memory."
            }
          ]
        },
        {
          "type": "function",
          "name": "vulkan_data",
          "briefDescription": "Returns the data_handle received from the allocator's alloc_data-method.",
          "overloads": [
            {
              "declaration": "auto vulkan_data() const noexcept -> base_gpu_buffer_allocator::data_handle;",
              "description": "Returns the data_handle received from the allocator's alloc_data-method."
            }
          ],
          "related": [
            "base_gpu_buffer_allocator"
          ]
        },
        {
          "type": "function",
          "name": "bind_to_shader",
          "briefDescription": "Binds the buffer to the given shader; as in sets the buffer as one used by the shader.",
          "overloads": [
            {
              "declaration": "virtual void vulkan_data(bind_handle) const = 0;",
              "description": "Binds the buffer to the given shader; as in sets the buffer as one used by the shader.\nThe specific usage is specified by the given handle."
            }
          ],
          "exceptions": [
            "Throws std::invalid_argument if the given shader is not on the same gpu as the buffer.",
            "Throws std::runtime_error if there was an error binding the data to the shader due to causes outside of the program."
          ]
        }
      ]
    }
  ]
}