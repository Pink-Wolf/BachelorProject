{
  "type": "class",

  "declaration": "template <typename InputShaderType, typename PixelShaderType> class draw_material;",
  "namespace": "CompWolf",
  "briefDescription": "Contains the code/intructions for how to draw things.",
  "detailedDescription": "Contains the code/intructions for how to draw things.",

  "templateParameters": [
    {
      "name": "InputShaderType",
      "description": "The type of shader run for each input/vertex of the model.\nAs in the vertex shader that the material's graphics-pipeline uses."
    },
    {
      "name": "PixelShaderType",
      "description": "The type of shader run for each pixel drawn.\nAs in the fragment shader that the material's graphics-pipeline uses."
    }
  ],

  "baseClasses": [ "basic_freeable" ],

  "copyable": false,
  "movable": true,
  "constructor": {
    "overloads": [
      {
        "declaration": "draw_material() noexcept;",
        "description": "Constructs a freed draw_material, as in one that cannot be used to draw anything."
      },
      {
        "declaration": "draw_material(InputShaderType&, PixelShaderType&);",
        "description": "Constructs a material with the given shaders."
      },
      {
        "declaration": "draw_material(InputShaderType&, PixelShaderType&, draw_material_settings);",
        "description": "Constructs a material with the given shaders and settings."
      },
      {
        "declaration": "draw_material(draw_material&&) noexcept;",
        "description": "draw_material is movable."
      }
    ],
    "related": [
      "draw_material_settings"
    ]
  },
  "memberGroups": [
    {
      "name": "Type Definitions",
      "items": [
        {
          "type": "alias",
          "name": "input_shader_type",
          "declaration": "using input_shader_type = InputShaderType;",
          "briefDescription": "The type of shader run for each input/vertex of the model.",
          "detailedDescription": "The type of shader run for each input/vertex of the model.\nAs in the vertex shader that the material's graphics-pipeline uses."
        },
        {
          "type": "alias",
          "name": "pixel_shader_type",
          "declaration": "using pixel_shader_type = PixelShaderType;",
          "briefDescription": "The type of shader run for each pixel drawn.",
          "detailedDescription": "The type of shader run for each pixel drawn.\nAs in the fragment shader that the material's graphics-pipeline uses."
        },
        {
          "type": "alias",
          "name": "shader_field_types",
          "declaration": "using shader_field_types = merge_type_value_pairs_by_value<input_shader_type::typename field_types, pixel_shader_type::typename field_types>;",
          "briefDescription": "The fields of the material's shaders.",
          "detailedDescription": "A collection of [[type_value_pair]]s, denoting the material's shaders' fields' type and binding position.\nIf multiple shaders share fields, then they are NOT repeated here."
        }
      ]
    },
    {
      "name": "Accessors",
      "items": [
        {
          "type": "function",
          "name": "input_shader",
          "briefDescription": "Returns the input_shader used by the material's graphics-pipeline.",
          "overloads": [
            {
              "declaration": "auto input_shader() noexcept -> input_shader&",
              "description": "Returns the input_shader used by the material's graphics-pipeline as its vertex shader."
            },
            {
              "declaration": "auto input_shader() const noexcept -> const input_shader&",
              "description": "Like (1), but const."
            }
          ],
          "related": [
            "input_shader"
          ]
        },
        {
          "type": "function",
          "name": "pixel_shader",
          "briefDescription": "Returns the pixel_shader used by the material's graphics-pipeline.",
          "overloads": [
            {
              "declaration": "auto pixel_shader() noexcept -> shader&",
              "description": "Returns the pixel_shader used by the material's graphics-pipeline as its fragment shader."
            },
            {
              "declaration": "auto input_shader() const noexcept -> const shader&",
              "description": "Like (1), but const."
            }
          ],
          "related": [
            "shader"
          ]
        }
      ]
    },
    {
      "name": "Vulkan-related",
      "description": "These members reveal a lower level of abstractions, and so they should rarely be used.",
      "items": [
        {
          "type": "function",
          "name": "vulkan_window_data",
          "briefDescription": "Returns data about drawing with the material on the specific window.",
          "overloads": [
            {
              "declaration": "auto vulkan_window_data(const window&) noexcept -> window_specific_material&",
              "description": "Returns data about drawing with the material on the specific window."
            },
            {
              "declaration": "auto vulkan_window_data(const window&) const noexcept -> const window_specific_material&",
              "description": "Like (1), but const."
            }
          ],
          "related": [
            "window_specific_material"
          ]
        }
      ]
    }
  ],
  "related": [
    "input_shader",
    "shader"
  ]
}