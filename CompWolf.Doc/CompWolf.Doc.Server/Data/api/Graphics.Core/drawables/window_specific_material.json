{
  "type": "class",

  "declaration": "class window_specific_material;",
  "namespace": "CompWolf",
  "briefDescription": "Contains a [[draw_material]]'s data and logic specific to a window.",
  "detailedDescription": "Contains a [[draw_material]]'s data and logic specific to a window.",

  "warnings": [
    "This reveals a lower level of abstractions, and so this should rarely be used directly."
  ],

  "baseClasses": [ "basic_freeable", "window_user" ],

  "copyable": true,
  "movable": true,
  "constructor": {
    "overloads": [
      {
        "declaration": "window_specific_material() noexcept;",
        "description": "Constructs a freed window_specific_material, as in one that cannot be used to draw anything."
      },
      {
        "declaration": "window_specific_material(window_specific_material&&) noexcept;",
        "description": "window_specific_material is movable."
      }
    ]
  },
  "memberGroups": [
    {
      "name": "Accessors",
      "items": [
        {
          "type": "function",
          "name": "gpu",
          "briefDescription": "Returns the gpu this material is for.",
          "overloads": [
            {
              "declaration": "auto gpu() noexcept -> gpu_connection&",
              "description": "Returns the gpu this material is for."
            },
            {
              "declaration": "auto gpu() const noexcept -> const gpu_connection&;",
              "description": "Like (1), but const."
            }
          ],
          "related": [
            "gpu_connection"
          ]
        },
        {
          "type": "function",
          "name": "field_indices",
          "briefDescription": "Returns the binding position of the material's shaders' fields.",
          "overloads": [
            {
              "declaration": "auto field_indices() const noexcept -> const std::vector<std::size_t>&",
              "description": "Returns the binding position of the material's shaders' fields.\nThe order matches the [[draw_material]]'s field_types."
            }
          ],
          "related": [
            "draw_material"
          ]
        }
      ]
    },
    {
      "name": "Vulkan-related",
      "description": "These members reveal a lower level of abstractions, and so they should rarely be used.",
      "items": [
        {
          "type": "function",
          "name": "vulkan_pipeline_layout",
          "briefDescription": "Returns the pipeline's vulkan_pipeline_layout, representing a VkPipelineLayout.",
          "overloads": [
            {
              "declaration": "auto vulkan_pipeline_layout() const noexcept -> Private::vulkan_pipeline_layout;",
              "description": "Returns the pipeline's vulkan_pipeline_layout, representing a VkPipelineLayout."
            }
          ]
        },
        {
          "type": "function",
          "name": "vulkan_pipeline_layout_descriptor",
          "briefDescription": "Returns the pipeline's vulkan_pipeline_layout_descriptor, representing a VkDescriptorSetLayout.",
          "overloads": [
            {
              "declaration": "auto vulkan_pipeline_layout_descriptor() const noexcept -> Private::vulkan_pipeline_layout_descriptor;",
              "description": "Returns the pipeline's vulkan_pipeline_layout_descriptor, representing a VkDescriptorSetLayout."
            }
          ]
        },
        {
          "type": "function",
          "name": "vulkan_descriptor_pool",
          "briefDescription": "Returns the pipeline's vulkan_descriptor_pool, representing a VkDescriptorPool.",
          "overloads": [
            {
              "declaration": "auto vulkan_descriptor_pool() const noexcept -> Private::vulkan_descriptor_pool;",
              "description": "Returns the pipeline's vulkan_descriptor_pool, representing a VkDescriptorPool."
            }
          ]
        },
        {
          "type": "function",
          "name": "vulkan_descriptor_sets",
          "briefDescription": "Returns the pipeline's vulkan_descriptor_sets, representing some VkDescriptorSets.",
          "overloads": [
            {
              "declaration": "auto vulkan_descriptor_sets() const noexcept -> const std::vector<Private::vulkan_descriptor_set>&;",
              "description": "Returns the pipeline's vulkan_descriptor_sets, representing some VkDescriptorSets."
            }
          ]
        },
        {
          "type": "function",
          "name": "vulkan_pipeline",
          "briefDescription": "Returns the pipeline's vulkan_pipeline, representing a VkPipeline.",
          "overloads": [
            {
              "declaration": "auto vulkan_pipeline() const noexcept -> Private::vulkan_pipeline;",
              "description": "Returns the pipeline's vulkan_pipeline, representing a VkPipeline."
            }
          ]
        },
        {
          "type": "function",
          "name": "vulkan_frame_buffer",
          "briefDescription": "Returns the pipeline's vulkan_frame_buffer, representing a VkFramebuffer.",
          "overloads": [
            {
              "declaration": "auto vulkan_frame_buffer(std::size_t) const -> Private::vulkan_frame_buffer;",
              "description": "Returns the pipeline's vulkan_frame_buffer for the frame with the given index in [[window_swapchain]]'s frames(), representing a VkFramebuffer."
            }
          ],
          "exceptions": [
            "Throws std::out_of_range if there is no frame at the given index."
          ]
        }
      ]
    }
  ]
}