{
  "type": "class",

  "namespace": "CompWolf",
  "declaration": "class window;",
  "briefDescription": "A window, as in a rectangle that can display a dynamic image.",
  "detailedDescription": "A window, as in a rectangle that can display a dynamic image, and that listens for various inputs from outside the program (like a key being pressed).",

  "baseClasses": [ "basic_freeable" ],

  "dataMembers": [
    {
      "name": "rebuilding_surface",
      "declaration": "event<window_rebuild_surface_parameters> rebuilding_surface;",
      "briefDescription": "Event invoked before the window's surface is rebuild.",
      "detailedDescription": "Event invoked before the window's surface is rebuild, for example because the size of the window changed.",
      "related": [
        "event"
      ]
    },
    {
      "name": "rebuild_surface",
      "declaration": "event<window_rebuild_surface_parameters> rebuild_surface;",
      "briefDescription": "Event invoked after the window's surface is rebuild.",
      "detailedDescription": "Event invoked after the window's surface is rebuild, for example because the size of the window changed.",
      "related": [
        "event"
      ]
    },
    {
      "name": "freeing",
      "declaration": "event<void> freeing;",
      "briefDescription": "Event invoked before the window is freed.",
      "detailedDescription": "Event invoked before the window is freed.",
      "related": [
        "event"
      ]
    },
    {
      "name": "freed",
      "declaration": "event<void> freed;",
      "briefDescription": "Event invoked after the window is freed.",
      "detailedDescription": "Event invoked after the window is freed.",
      "related": [
        "event"
      ]
    }
  ],

  "copyable": false,
  "movable": true,
  "constructor": {
    "overloads": [
      {
        "declaration": "window() noexcept;",
        "description": "Constructs a freed window, as in one that is already closed."
      },
      {
        "declaration": "window(graphics_environment&, window_settings);",
        "description": "Constructs a window with the given settings."
      },
      {
        "declaration": "window(gpu_connection&, window_settings);",
        "description": "Constructs a window on the given gpu, with the given settings."
      },
      {
        "declaration": "window(window&&) noexcept;",
        "description": "window is movable."
      }
    ],
    "exceptions": [
      "Throws std::runtime_error if there was an error during setup due to causes outside of the program.",
      "Throws std::invalid_argument if the given settings have invalid settings."
    ],

    "related": [
      "window_settings"
    ]
  },
  "methodGroups": [
    {
      "name": "Accessors",
      "items": [
        {
          "name": "gpu",
          "briefDescription": "Returns the gpu that the window is on.",
          "overloads": [
            {
              "declaration": "auto gpu() noexcept -> gpu_connection&",
              "description": "Returns the gpu that the window is on."
            },
            {
              "declaration": "auto gpu() const noexcept -> const gpu_connection&;",
              "description": "Like (1), but const."
            }
          ],
          "related": [
            "gpu_connection"
          ]
        },
        {
          "name": "pixel_size",
          "briefDescription": "Returns the size of the window, in pixels.",
          "overloads": [
            {
              "declaration": "auto pixel_size() const noexcept -> const_value_event_wrapper<std::pair<int, int>>&",
              "description": "Returns the width and height of the window, in pixels.\nThis size does not include any border around the window."
            }
          ],
          "related": [
            "const_value_event_wrapper"
          ]
        },
        {
          "name": "running",
          "briefDescription": "Returns whether the window is not freed.",
          "overloads": [
            {
              "declaration": "auto running() const noexcept -> bool;",
              "description": "Returns whether the window is not freed."
            }
          ]
        }
      ]
    },
    {
      "name": "Modifiers",
      "items": [
        {
          "name": "update_image",
          "briefDescription": "Makes the window display what has been drawn onto it.",
          "overloads": [
            {
              "declaration": "void update_image()",
              "description": "Makes the window display what has been drawn onto it (since the last call to update_image)."
            }
          ]
        },
        {
          "name": "set_pixel_size",
          "briefDescription": "Sets the size of the window, in pixels.",
          "overloads": [
            {
              "declaration": "void set_pixel_size(int width, int height);",
              "description": "Sets the size of the window, in pixels.\nThis size does not include any border around the window."
            }
          ],
          "exceptions": [
            "Throws std::runtime_error if there was an error while changing the size due to causes outside of the program.",
            "Throws std::domain_error if given a non-positive width and/or height."
          ]
        },
        {
          "name": "close",
          "briefDescription": "Frees the window.",
          "overloads": [
            {
              "declaration": "void close() noexcept;",
              "description": "Frees the window."
            }
          ]
        }
      ]
    },
    {
      "name": "Vulkan-related",
      "description": "These members reveal a lower level of abstractions, and so they should rarely be used.",
      "items": [
        {
          "name": "surface",
          "briefDescription": "Returns the surface of the window.",
          "overloads": [
            {
              "declaration": "auto surface() noexcept -> window_surface&",
              "description": "Returns the surface of the window, as in the actual area that can display a dynamic image."
            },
            {
              "declaration": "auto surface() const noexcept -> const window_surface&;",
              "description": "Like (1), but const."
            }
          ],
          "related": [
            "window_surface"
          ]
        },
        {
          "name": "swapchain",
          "briefDescription": "Returns the swapchain of the window.",
          "overloads": [
            {
              "declaration": "auto swapchain() noexcept -> window_swapchain&",
              "description": "Returns the swapchain of the window, as in the actual images that are being drawn before being displaying on the window."
            },
            {
              "declaration": "auto swapchain() const noexcept -> const window_swapchain&;",
              "description": "Like (1), but const."
            }
          ],
          "related": [
            "window_swapchain"
          ]
        }
      ]
    }
  ],

  "related": [
    "window_surface",
    "window_swapchain"
  ],

  "example": "simple_window"
}