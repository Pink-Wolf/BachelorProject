{
  "type": "class",

  "namespace": "CompWolf",
  "declaration": "template <const char* const Path, typename ShaderType> class static_shader;",
  "briefDescription": "A shader whose code is from a file at the given path.",
  "detailedDescription": "A shader whose code is from a file at the given path.\nMultiple instances of this class share resources, meaning you can construct instances of this whenever you need it without worrying about memory.",

  "baseClasses": [ "basic_freeable" ],

  "templateParameters": [
    {
      "name": "Path",
      "description": "A pointer to a null-terminated string, which denotes the path to the .spv-file containing the code for the shader."
    },
    {
      "name": "ShaderType",
      "description": "The type of shader, like a template instance of [[shader]] or [[input_shader]].\nMust be constructible with the same parameters as [[shader]]."
    }
  ],

  "copyable": true,
  "movable": true,
  "constructor": {
    "overloads": [
      {
        "declaration": "static_shader() noexcept;",
        "description": "Constructs a freed shader, that is one that cannot be run."
      },
      {
        "declaration": "static_shader(bool);",
        "description": "If the bool is true, constructs the shader; if false, constructs a freed shader like (1)."
      },
      {
        "declaration": "static_shader(const static_shader&) noexcept;",
        "description": "static_shader is copyable."
      },
      {
        "declaration": "static_shader(static_shader&&) noexcept;",
        "description": "static_shader is movable."
      }
    ],
    "exceptions": [
      "Throws std::runtime_error if the file with the shader's code could not be found or opened.",
      "Throws std::runtime_error if there was an error during setup due to causes outside of the program."
    ]
  },
  "memberGroups": [
    {
      "name": "Type Definitions",
      "items": [
        {
          "type": "alias",
          "name": "shader_type",
          "declaration": "using shader_type = ShaderType;",
          "briefDescription": "The type of shader this contains.",
          "detailedDescription": "The type of shader this contains."
        }
      ]
    },
    {
      "name": "Accessors",
      "items": [
        {
          "type": "function",
          "name": "shader",
          "briefDescription": "Returns the shader this contains.",
          "overloads": [
            {
              "declaration": "auto shader() noexcept -> shader_type&",
              "description": "Returns the shader this contains."
            },
            {
              "declaration": "auto shader() const noexcept -> const shader_type&",
              "description": "Like (1), but const."
            }
          ]
        }
      ]
    }
  ],

  "related": [
    "shader"
  ]
}