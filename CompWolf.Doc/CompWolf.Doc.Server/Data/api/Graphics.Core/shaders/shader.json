{
  "type": "class",

  "namespace": "CompWolf",
  "declaration": "template <typename... FieldTypes> class shader;",
  "briefDescription": "Some code that can be run on a gpu.",
  "detailedDescription": "Some code that can be run on a gpu.\nA shader receives some inputs, and for each input runs its code and outputs some values.\n\nFieldTypes specifies the type of data the shader has, which is not unique to each input. That is, FieldTypes specifies its uniform buffers, specified in glsl using layout(binding = ?).",
  "warnings": [
    "It is undefined behaviour to have FieldTypes not match what is specified in the actual shader-code."
  ],

  "baseClasses": [ "basic_freeable" ],

  "copyable": false,
  "movable": true,
  "constructor": {
    "overloads": [
      {
        "declaration": "shader() noexcept;",
        "description": "Constructs a freed shader, that is one that cannot be run."
      },
      {
        "declaration": "shader(graphics_environment&, std::vector<char32_t>&& spirV_code);",
        "description": "Constructs a shader with the given SPIR-V code."
      },
      {
        "declaration": "shader(shader&&) noexcept;",
        "description": "shader is movable."
      }
    ],
    "exceptions": [
      "Throws std::runtime_error if there was an error during setup due to causes outside of the program."
    ]
  },
  "memberGroups": [
    {
      "name": "Accessors",
      "items": [
        {
          "type": "function",
          "name": "environment",
          "briefDescription": "Returns the environment that the shader is on.",
          "overloads": [
            {
              "declaration": "auto environment() noexcept -> graphics_environment&;",
              "description": "Returns the environment that the shader is on."
            },
            {
              "declaration": "auto environment() const noexcept -> const graphics_environment&;",
              "description": "Like (1), but const."
            }
          ],
          "related": [
            "graphics_environment"
          ]
        }
      ]
    },
    {
      "name": "Vulkan-related",
      "description": "These members reveal a lower level of abstractions, and so they should rarely be used.",
      "items": [
        {
          "type": "function",
          "name": "vulkan_shader",
          "briefDescription": "Returns the shader's vulkan_shader, representing a VkShaderModule.",
          "overloads": [
            {
              "declaration": "auto vulkan_shader(const gpu_connection&) const -> Private::vulkan_instance;",
              "description": "Returns the shader's vulkan_shader, representing a VkShaderModule, for the given gpu."
            }
          ],
          "exceptions": [
            "Throws std::runtime_error if there was an error getting the vulkan_shader due to causes outside of the program."
          ]
        }
      ]
    }
  ]
}