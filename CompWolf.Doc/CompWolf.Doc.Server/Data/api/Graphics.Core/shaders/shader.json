{
  "type": "class",

  "namespace": "CompWolf",
  "declaration": "template <typename... FieldTypes> class shader;",
  "briefDescription": "Some code that can be run on a gpu.",
  "detailedDescription": "Some code that can be run on a gpu.\nA shader receives some inputs, and for each input runs its code and outputs some values.",
  "warnings": [
    "It is undefined behaviour to have FieldTypes not match what is specified in the actual shader-code.",
    "It is undefined behaviour for FieldTypes to not be sorted by binding position."
  ],

  "templateParameters": [
    {
      "name": "FieldTypes",
      "description": "The type and binding position of data the shader has, which is not unique to each input. That is, FieldTypes specifies its uniform buffers, specified in glsl using layout(binding = ?).\nMust be [[type_value_pair]]s, specifying its type and binding position.",
      "warnings": [
        "It is undefined behaviour to have FieldTypes not match what is specified in the actual shader-code.",
        "It is undefined behaviour for FieldTypes to not be sorted by binding position."
      ]
    }
  ],

  "baseClasses": [ "basic_freeable" ],

  "copyable": false,
  "movable": true,
  "constructor": {
    "overloads": [
      {
        "declaration": "shader() noexcept;",
        "description": "Constructs a freed shader, that is one that cannot be run."
      },
      {
        "declaration": "shader(std::vector<char32_t>&& spirV_code);",
        "description": "Constructs a shader with the given SPIR-V code."
      },
      {
        "declaration": "shader(shader&&) noexcept;",
        "description": "shader is movable."
      }
    ],
    "detailedDescription": "spir-V code can be gotten from a file with [[shader_code_from_file]].",
    "exceptions": [
      "Throws std::runtime_error if there was an error during setup due to causes outside of the program."
    ]
  },
  "memberGroups": [
    {
      "name": "Type Definitions",
      "items": [
        {
          "type": "alias",
          "name": "field_types",
          "declaration": "using field_types = type_list<FieldTypes...>;",
          "briefDescription": "The shader's fields.",
          "detailedDescription": "A collection of [[type_value_pair]]s, denoting the shader's fields' type and binding position.\nSorted by binding position."
        }
      ]
    },
    {
      "name": "Accessors",
      "items": [
        {
          "type": "variable",
          "name": "field_indices",
          "declaration": "inline static std::set<std::size_t> field_indices;",
          "briefDescription": "The indices given by FieldTypes, in a set.",
          "detailedDescription": "The indices given by FieldTypes, in a set."
        }
      ]
    },
    {
      "name": "Vulkan-related",
      "description": "These members reveal a lower level of abstractions, and so they should rarely be used.",
      "items": [
        {
          "type": "function",
          "name": "vulkan_shader",
          "briefDescription": "Returns the shader's vulkan_shader, representing a VkShaderModule.",
          "overloads": [
            {
              "declaration": "auto vulkan_shader(gpu_connection&) const -> Private::vulkan_instance;",
              "description": "Returns the shader's vulkan_shader, representing a VkShaderModule, for the given gpu."
            }
          ],
          "exceptions": [
            "Throws std::runtime_error if there was an error getting the vulkan_shader due to causes outside of the program."
          ]
        }
      ]
    }
  ],

  "related": [
    "ShaderField"
  ]
}