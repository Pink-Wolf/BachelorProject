{
  "type": "class",

  "namespace": "CompWolf",
  "declaration": "template <typename FieldType> struct shader_field_info;",
  "briefDescription": "Used to define how a gpu should handle types.",
  "detailedDescription": "A type trait class for types passed to shaders; That is, to be able to pass your class or struct to a shader, then you must specialize this template with your type. The type would then fulfill [[ShaderField]].\n\nYou can use [[new_shader_field]] to easily define your specialization.\n\nThe types that can be passed to shaders are:\n-float, float2, float3, float4,\n-double, double2, double3, double4,\n-[[shader_int]], shader_int2, shader_int3, shader_int4,\n-[[single_color]], [[opaque_color]], [[transparent_color]],\n-[[shader_image]].",

  "templateParameters": [
    {
      "name": "FieldType",
      "description": "The type to get info about being passed to shaders. [[shader_field_info]] must be properly specialized for the given FieldType, or else are [[shader_field_info]]'s members not defined."
    }
  ],

  "memberGroups": [
    {
      "items": [
        {
          "type": "variable",
          "name": "primitives",
          "declaration": "using primitives = type_list<[primitive types]>;",
          "briefDescription": "The primitive types making up the class/struct.",
          "detailedDescription": "A list of primitive shader types which makes up the class/struct."
        },
        {
          "type": "variable",
          "name": "primitive_offsets",
          "declaration": "static constexpr std::array<std::size_t, [size of primitives]> primitive_offsets;",
          "briefDescription": "The byte-position of the primitives in the class/struct.",
          "detailedDescription": "For each of the primitives making up the class/struct, their byte-position relative to the beginning of the class/struct."
        }
      ]
    }
  ],

  "copyable": true,
  "movable": true,

  "example": "vertex_shader_field_info"
}