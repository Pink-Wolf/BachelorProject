{
  "type": "class",

  "namespace": "CompWolf",
  "declaration": "template <ShaderField InputType, typename... FieldTypes> class input_shader;",
  "briefDescription": "A shader that can take a custom type of input.",
  "detailedDescription": "A shader that can take a custom type of input.\nA program using this shader takes the given InputType as its input.\n\nThis is, in terms of the graphics pipeline, a \"vertex\" shader.",
  "warnings": [
    "It is undefined behaviour to have InputType or FieldTypes not match what is specified in the actual shader-code."
  ],

  "templateParameters": [
    {
      "name": "InputType",
      "description": "The type of data the shader takes as input. That is, FieldTypes specifies its vertex input, specified in glsl using layout(location = ?).\nThe shader specifically takes multiple InputType-objects as its input."
    },
    {
      "name": "FieldTypes",
      "description": "The type of data the shader has, which is not unique to each input. That is, FieldTypes specifies its uniform buffers, specified in glsl using layout(binding = ?).\nMust be [[type_value_pair]]s, specifying its type and binding position."
    }
  ],

  "baseClasses": [ "shader" ],

  "copyable": false,
  "movable": true,
  "constructor": {
    "overloads": [
      {
        "declaration": "input_shader() noexcept;",
        "description": "Constructs a freed shader, that is one that cannot be run."
      },
      {
        "declaration": "input_shader(std::vector<char32_t>&& spirV_code);",
        "description": "Constructs a shader with the given SPIR-V code."
      },
      {
        "declaration": "input_shader(input_shader&&) noexcept;",
        "description": "input_shader is movable."
      }
    ],
    "detailedDescription": "spir-V code can be gotten from a file with [[shader_code_from_file]].",
    "exceptions": [
      "Throws std::runtime_error if there was an error during setup due to causes outside of the program."
    ]
  },
  "memberGroups": [
    {
      "name": "Type Definitions",
      "items": [
        {
          "type": "alias",
          "name": "input_type",
          "declaration": "using input_type = InputType;",
          "briefDescription": "The type that the shader takes as its input.",
          "detailedDescription": "The type that the shader takes as its input."
        }
      ]
    }
  ],

  "related": [
    "ShaderField"
  ]
}