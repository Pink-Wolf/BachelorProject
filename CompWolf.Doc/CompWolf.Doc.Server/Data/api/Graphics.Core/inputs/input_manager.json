{
  "type": "class",

  "declaration": "class input_manager;",
  "namespace": "CompWolf",
  "briefDescription": "Manages inputs from a user, like a keyboard key being pressed.",
  "detailedDescription": "Manages inputs from a user, like a keyboard key being pressed.\nThis should be constructed by the [[graphics_environment]].",

  "baseClasses": [ "basic_freeable" ],

  "copyable": false,
  "movable": true,
  "constructor": {
    "overloads": [
      {
        "declaration": "input_manager() noexcept;",
        "description": "Constructs a freed input_manager, as in one that ignores inputs."
      },
      {
        "declaration": "input_manager(const window_settings&, Private::glfw_window);",
        "description": "Sets up input-logic for the given window."
      },
      {
        "declaration": "input_manager(input_manager&&) noexcept;",
        "description": "input_manager is movable."
      }
    ],
    "exceptions": [
      "Throws std::runtime_error if there was an error while setting up input-logic due to causes outside of the program."
    ],
    "related": [
      "window_settings"
    ]
  },
  "memberGroups": [
    {
      "name": "Events",
      "items": [
        {
          "type": "function",
          "name": "char_pressed",
          "briefDescription": "Gets an event for when a key representing the given character is beginning to be held down.",
          "detailedDescription": "This currently supports a-z, A-Z, 0-9, ' '.\nThis treats uppercase and lowercase as the same character",
          "overloads": [
            {
              "declaration": "auto char_pressed(char) -> event<key_parameter>&",
              "description": "Gets an event for when the a key representing the given character is beginning to be held down."
            },
            {
              "declaration": "auto char_pressed() noexcept -> event<key_parameter>&",
              "description": "Gets an event for when any key representing a character is beginning to be held down."
            }
          ],
          "exceptions": [
            "Throws std::invalid_argument from (1) if this currently does not support the given character."
          ],
          "related": [
            "key_parameter"
          ]
        },
        {
          "type": "function",
          "name": "char_released",
          "briefDescription": "Gets an event for when a key representing the given character is being released from being held down.",
          "detailedDescription": "This currently supports a-z, A-Z, 0-9, ' '.\nThis treats uppercase and lowercase as the same character",
          "overloads": [
            {
              "declaration": "auto char_released(char) -> event<key_parameter>&",
              "description": "Gets an event for when the a key representing the given character is being released from being held down."
            },
            {
              "declaration": "auto char_released() noexcept -> event<key_parameter>&",
              "description": "Gets an event for when any key representing a character is being released from being held down."
            }
          ],
          "exceptions": [
            "Throws std::invalid_argument from (1) if this currently does not support the given character."
          ],
          "related": [
            "key_parameter"
          ]
        }
      ]
    },
    {
      "name": "Vulkan-related",
      "description": "These members reveal a lower level of abstractions, and so they should rarely be used.",
      "items": [
        {
          "type": "function",
          "name": "on_glfw_input",
          "briefDescription": "Handles inputs received by glfw.",
          "overloads": [
            {
              "declaration": "void on_glfw_input(int glfwKey, int glfwAction, int glfwModifiers)",
              "description": "Tells the manager that a key with the given character was pressed."
            }
          ]
        }
      ]
    }
  ]
}