{
  "type": "class",

  "declaration": "class gpu_program_pool;",
  "namespace": "CompWolf",
  "briefDescription": "A manager for some [[gpu_program]]s.",
  "detailedDescription": "A manager for some [[gpu_program]]s.\nPrograms should be split into different pools when they can run asynchronous.",

  "baseClasses": [ "basic_freeable" ],

  "copyable": false,
  "movable": true,
  "constructor": {
    "overloads": [
      {
        "declaration": "gpu_program_pool() noexcept;",
        "description": "Constructs a freed gpu_program_pool, as in one that cannot contain any programs."
      },
      {
        "declaration": "gpu_program_pool(gpu_connection&, std::size_t family_index, std::size_t thread_index);",
        "description": "Creates a pool on the given thread;\nThe given thread is the thread on the given gpu, whose family is at the given family-index of the gpu's families()-vector, and who is at the given thread-index of the family's threads-vector."
      },
      {
        "declaration": "static auto new_pool_for(gpu_connection&, gpu_program_pool_settings) -> gpu_program_pool;",
        "description": "Finds the best thread on the given gpu to run some programs, based on the given settings, and creates a pool on it using (2)."
      },
      {
        "declaration": "static auto new_pool_for(std::vector<gpu_connection>&, gpu_program_pool_settings) -> gpu_program_pool;",
        "description": "Finds the best thread on the given gpus to run some programs, based on the given settings, and creates a pool on it using (2)."
      },
      {
        "declaration": "gpu_program_pool(gpu_program_pool&&) noexcept;",
        "description": "gpu_program_pool is movable."
      }
    ],
    "exceptions": [
      "Throws std::out_of_range from (2) if the given gpu does not have a family at the given family-index, or the family does not have a thread at the given thread-index.",
      "Throws std::runtime_error from (3) and (4) if the given gpus have no threads at all to perform the given type of programs."
    ]
  },
  "methodGroups": [
    {
      "name": "Accessors",
      "items": [
        {
          "name": "gpu",
          "briefDescription": "Returns the gpu that the pool is on.",
          "overloads": [
            {
              "declaration": "auto gpu() noexcept -> gpu_connection&",
              "description": "Returns the gpu that the pool is on."
            },
            {
              "declaration": "auto gpu() const noexcept -> const gpu_connection&",
              "description": "Like (1), but const."
            }
          ],
          "related": [
            "gpu_connection"
          ]
        },
        {
          "name": "family",
          "briefDescription": "Returns the family of threads that the pool is on.",
          "overloads": [
            {
              "declaration": "auto family() noexcept -> gpu_thread_family&",
              "description": "Returns the family of threads that the pool is on."
            },
            {
              "declaration": "auto family() const noexcept -> const gpu_thread_family&",
              "description": "Like (1), but const."
            }
          ],
          "related": [
            "gpu_thread_family"
          ]
        },
        {
          "name": "thread",
          "briefDescription": "Returns the thread that the pool is on.",
          "overloads": [
            {
              "declaration": "auto thread() noexcept -> gpu_thread&",
              "description": "Returns the family of threads that the pool is on."
            },
            {
              "declaration": "auto thread() const noexcept -> const gpu_thread&",
              "description": "Like (1), but const."
            }
          ],
          "related": [
            "gpu_thread"
          ]
        },
        {
          "name": "family_index",
          "briefDescription": "Returns the index of family() in gpu().families().",
          "overloads": [
            {
              "declaration": "auto family_index() const noexcept -> std::size_t",
              "description": "Returns the index of the gpu-thread-family in the gpu's families()-vector."
            }
          ],
          "related": [
            "gpu_connection",
            "gpu_thread_family"
          ]
        },
        {
          "name": "thread_index",
          "briefDescription": "Returns the index of thread() in family().threads.",
          "overloads": [
            {
              "declaration": "auto thread_index() const noexcept -> std::size_t",
              "description": "Returns the index of the gpu-thread in the gpu-thread-family's threads-vector."
            }
          ],
          "related": [
            "gpu_thread_family",
            "gpu_thread"
          ]
        },
        {
          "name": "latest_synchronization",
          "briefDescription": "Returns the pool's latest synchronization-data.",
          "overloads": [
            {
              "declaration": "auto latest_synchronization() noexcept -> gpu_program_sync&",
              "description": "Returns a pointer to the pool's latest synchronization-data.\nWaiting on the data's fence waits for all of the pool's programs to finish.\nReturns nullptr if there are no synchronization data."
            },
            {
              "declaration": "auto latest_synchronization() const noexcept -> const gpu_program_sync&",
              "description": "Like (1), but const."
            }
          ],
          "related": [
            "gpu_program_sync"
          ]
        },
        {
          "name": "working",
          "briefDescription": "Returns whether any of the pool's programs are still running.",
          "overloads": [
            {
              "declaration": "inline auto working() const noexcept -> bool",
              "description": "Returns whether any of the pool's programs are still running."
            }
          ]
        }
      ]
    },
    {
      "name": "Modifiers",
      "items": [
        {
          "name": "wait",
          "briefDescription": "Waits until all of the pool's programs are done, and then returns.",
          "overloads": [
            {
              "declaration": "inline auto working() const noexcept -> bool",
              "description": "Waits until all of the pool's programs are done, and then returns."
            }
          ]
        },
        {
          "name": "push_synchronization",
          "briefDescription": "Replaces the latest synchronization-data.",
          "overloads": [
            {
              "declaration": "auto push_synchronization(gpu_program_sync&&) noexcept -> gpu_program_sync&",
              "description": "Replaces the pool's latest synchronization-data; the new data should denote when all of the pool's programs are done."
            }
          ],
          "related": [
            "gpu_program_sync"
          ]
        }
      ]
    },
    {
      "name": "Vulkan-related",
      "description": "These members reveal a lower level of abstractions, and so they should rarely be used.",
      "items": [
        {
          "name": "vulkan_pool",
          "briefDescription": "Returns the pool's vulkan_command_pool, representing a VkCommandPool.",
          "overloads": [
            {
              "declaration": "auto vulkan_pool() const noexcept -> Private::vulkan_command_pool",
              "description": "Returns the pool's vulkan_command_pool, representing a VkCommandPool."
            }
          ]
        },
        {
          "name": "last_vulkan_fence",
          "briefDescription": "Returns the latest synchronization-object's vulkan_fence, representing a VkFence.",
          "overloads": [
            {
              "declaration": "auto last_vulkan_fence() const noexcept -> Private::vulkan_fence",
              "description": "Returns the latest synchronization-object's vulkan_fence, representing a VkFence.\nReturns nullptr if there are no synchronization objects."
            }
          ],
          "related": [
            "gpu_program_sync"
          ]
        },
        {
          "name": "last_vulkan_semaphore",
          "briefDescription": "Returns the latest synchronization-object's vulkan_semaphore, representing a VkSemaphore.",
          "overloads": [
            {
              "declaration": "auto last_vulkan_semaphore() const noexcept -> Private::vulkan_semaphore",
              "description": "Returns the latest synchronization-object's vulkan_semaphore, representing a VkSemaphore.\nReturns nullptr if there are no synchronization objects."
            }
          ],
          "related": [
            "gpu_program_sync"
          ]
        }
      ]
    }
  ]
}