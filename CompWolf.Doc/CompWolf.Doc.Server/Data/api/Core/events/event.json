{
  "type": "class",

  "declaration": "template <typename ParameterType = void> class event;",
  "namespace": "CompWolf",
  "briefDescription": "An implementation of the observer pattern.",
  "detailedDescription": "Allows functions and functors to \"subscribe\" to this; this can then be invoked to invoke all subscribers.",

  "templateParameters": [
    {
      "name": "ParameterType",
      "description": "The type of object to pass to subscribers; subscribers must have this as their only parameter.\nIf void, passes nothing to subscribers; subscribers must then have no parameters.\nConsider making this a reference type to minimize data copying."
    }
  ],

  "copyable": true,
  "movable": true,
  "constructor": {
    "overloads": [
      {
        "declaration": "event() noexcept;",
        "description": "Constructs an event."
      },
      {
        "declaration": "event(const event&) noexcept;",
        "description": "event is copyable."
      },
      {
        "declaration": "event(event&&) noexcept;",
        "description": "event is movable."
      }
    ]
  },
  "memberGroups": [
    {
      "name": "Type Definitions",
      "items": [
        {
          "type": "alias",
          "name": "parameter_type",
          "declaration": "using parameter_type = ParameterType;",
          "briefDescription": "The parameter type of the event's subscribers.",
          "detailedDescription": "The parameter type of the event's subscribers.\nIf no data is passed to subscribers, then this is void."
        },
        {
          "type": "alias",
          "name": "value_type",
          "declaration": "using value_type = std::function<void(parameter_type)>;",
          "briefDescription": "The type of functor that can subscribe to the event.",
          "detailedDescription": "The type of functor that can subscribe to the event."
        },
        {
          "type": "alias",
          "name": "key_type",
          "declaration": "using key_type = std::size_t;",
          "briefDescription": "The type of object used to represent a subscriber.",
          "detailedDescription": "The type of object used to represent a subscriber.",
          "related": [
            "event::subscribe",
            "event::unsubscribe"
          ]
        }
      ]
    },
    {
      "name": "Modifiers",
      "items": [
        {
          "type": "function",
          "name": "subscribe",
          "briefDescription": "Subscribes the given functor to the event.",
          "overloads": [
            {
              "declaration": "auto subscribe(value_type) const noexcept -> key_type",
              "description": "Subscribes the given functor to the event.\nReturns a key to identify the functor if you later wishes to unsubscribe it from the event."
            }
          ],
          "related": [ "event::unsubscribe" ]
        },
        {
          "type": "function",
          "name": "unsubscribe",
          "briefDescription": "Unsubscribes the given functor from the event.",
          "overloads": [
            {
              "declaration": "void unsubscribe(key_type) const noexcept",
              "description": "Unsubscribes the functor represented by the given key from the event.\nThe key was generated when the functor subscribed to the event."
            }
          ],
          "related": [ "event::subscribe" ]
        }
      ]
    },
    {
      "name": "Operators",
      "items": [
        {
          "type": "function",
          "name": "operator()",
          "briefDescription": "Invokes all subscribed functions/functors.",
          "overloads": [
            {
              "declaration": "void operator()(parameter_type) const",
              "description": "Invokes all subscribed functions/functors, passing along the given value to them."
            }
          ]
        },
        {
          "type": "function",
          "name": "invoke",
          "briefDescription": "Invokes all subscribed functions/functors.",
          "overloads": [
            {
              "declaration": "void invoke(parameter_type) const",
              "description": "Invokes all subscribed functions/functors, passing along the given value to them."
            }
          ]
        }
      ]
    }
  ],
  "related": [
    "input_shader",
    "shader"
  ]
}