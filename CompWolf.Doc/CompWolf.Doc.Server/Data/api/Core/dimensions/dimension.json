{
  "type": "class",

  "declaration": "template <typename ValueType, std::size_t... Sizes> class dimension;",
  "namespace": "CompWolf",
  "briefDescription": "A math-vector, matrix, or higher dimension array of numbers.",
  "detailedDescription": "A math-vector, matrix, or higher dimension array of numbers.\nThat is, an std::array, where the template argument Sizes specifies what the std::array represents.",

  "templateParameters": [
    {
      "name": "ValueType",
      "description": "The type of value contained by the dimension."
    },
    {
      "name": "Sizes",
      "description": "If this contains a single number, then dimension is a math-vector/array, with the given size.\nIf this contains 2 numbers, then dimension is a matrix/2d array, with the given amount of rows and column.\nIf this contains x numbers, then the pattern follows: dimension is an x-dimensional array, with the given amount of elements in each dimension.\n\nAll values must be positive."
    }
  ],

  "baseClasses": ["std::array"],

  "copyable": true,
  "movable": true,
  "constructor": {
    "overloads": [
      {
        "declaration": "constexpr dimension();",
        "description": "Constructs a dimension with uninitialized values."
      },
      {
        "declaration": "constexpr dimension(std::initializer_list<ValueType>);",
        "description": "Constructs a dimension with the given values.\nIf the dimension is a matrix, then the values are grouped together in rows, meaning you first provide the values for the first row, then the second, and so on and so forth."
      },
      {
        "declaration": "constexpr dimension(const dimension&) noexcept;",
        "description": "dimension is copyable."
      },
      {
        "declaration": "constexpr dimension(dimension&&) noexcept;",
        "description": "dimension is movable."
      }
    ]
  },
  "memberGroups": [
    {
      "name": "Fields",
      "items": [
        {
          "type": "alias",
          "name": "dimension_sizes",
          "declaration": "static constexpr std::array<std::size_t, size_of<Dimensions...>> dimension_sizes;",
          "briefDescription": "The size of the vertex/matrix/etc. As in the dimension's template argument Sizes.",
          "detailedDescription": "The size of the vertex/matrix/etc. As in the dimension's template argument Sizes."
        }
      ]
    },
    {
      "name": "Accessors",
      "items": [
        {
          "type": "function",
          "name": "at",
          "briefDescription": "Gets the element at the given column, row, etc.",
          "overloads": [
            {
              "declaration": "template <typename... IndexTypes> constexpr auto at(IndexTypes&&... indices) -> reference",
              "description": "If the dimension is a vector, gets the element at the given index.\nIf the dimension is a matrix, gets the element at the given column and row.\nThis pattern follows for higher-dimensions objects.\n\nIf this is given fewer indices than the object has dimensions, for example at(1) for a matrix, then the remaining indices are assumed to be 0."
            },
            {
              "declaration": "template <typename... IndexTypes> constexpr auto at(IndexTypes&&... indices) const -> const_reference",
              "description": "Like (1), but const."
            }
          ],
          "exceptions": [
            "Throws std::domain_error If any of the given indices are outside the dimension."
          ]
        }
      ]
    },
    {
      "name": "Accessors: Vector",
      "description": "These accessors are only available if the dimension represents a vector or higher dimension object.",
      "items": [
        {
          "type": "function",
          "name": "x",
          "briefDescription": "Gets the first element of the vector.",
          "overloads": [
            {
              "declaration": "constexpr auto x() noexcept -> reference",
              "description": "Gets the first element of the vector.\nOnly available if the vector has the element."
            },
            {
              "declaration": "constexpr auto x() const noexcept -> const_reference",
              "description": "Like (1), but const."
            }
          ]
        },
        {
          "type": "function",
          "name": "y",
          "briefDescription": "Gets the second element of the vector.",
          "overloads": [
            {
              "declaration": "constexpr auto y() noexcept -> reference",
              "description": "Gets the second element of the vector.\nOnly available if the vector has the element."
            },
            {
              "declaration": "constexpr auto y() const noexcept -> const_reference",
              "description": "Like (1), but const."
            }
          ]
        },
        {
          "type": "function",
          "name": "z",
          "briefDescription": "Gets the third element of the vector.",
          "overloads": [
            {
              "declaration": "constexpr auto z() noexcept -> reference",
              "description": "Gets the third element of the vector.\nOnly available if the vector has the element."
            },
            {
              "declaration": "constexpr auto z() const noexcept -> const_reference",
              "description": "Like (1), but const."
            }
          ]
        },
        {
          "type": "function",
          "name": "w",
          "briefDescription": "Gets the fourth element of the vector.",
          "overloads": [
            {
              "declaration": "constexpr auto w() noexcept -> reference",
              "description": "Gets the fourth element of the vector.\nOnly available if the vector has the element."
            },
            {
              "declaration": "constexpr auto w() const noexcept -> const_reference",
              "description": "Like (1), but const."
            }
          ]
        }
      ]
    },
    {
      "name": "Accessors: Matrix",
      "description": "These accessors are only available if the dimension represents a matrix or higher dimension object.",
      "items": [
        {
          "type": "function",
          "name": "[x,y,z,w][x,y,z,w]",
          "briefDescription": "Gets the element at the first/second/third/fourth column and first/second/third/fourth row.",
          "overloads": [
            {
              "declaration": "constexpr auto [x,y,z,w][x,y,z,w]() noexcept -> reference",
              "description": "Gets the element at the first/second/third/fourth column and first/second/third/fourth row.\nThe name \"[x,y,z,w][x,y,z,w]\" should be understood as either:\n-xx, xy, xz, xw,\n-yx, yy, yz, yw,\n-zx, zy, zz, zw,\n-wx, wy, wz, ww."
            },
            {
              "declaration": "constexpr auto [x,y,z,w][x,y,z,w]() const noexcept -> const_reference",
              "description": "Like (1), but const."
            }
          ]
        }
      ]
    }
  ]
}