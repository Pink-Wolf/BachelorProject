{
  "type": "class",

  "declaration": "class gpu_semaphore;",
  "namespace": "CompWolf",
  "briefDescription": "Used for synchronization on the gpu.",
  "detailedDescription": "A \"semaphore\", which allows synchronization between work on the gpu.",

  "baseClasses": [ "basic_freeable" ],

  "copyable": false,
  "movable": true,
  "constructor": {
    "overloads": [
      {
        "declaration": "gpu_semaphore() noexcept;",
        "description": "Constructs a freed gpu_semaphore, as in one that cannot be used."
      },
      {
        "declaration": "gpu_semaphore(const gpu&);",
        "description": "Creates a semaphore for the given gpu."
      },
      {
        "declaration": "gpu_semaphore(gpu_semaphore&&) noexcept;",
        "description": "gpu_semaphore is movable."
      }
    ],
    "exceptions": [
      "Throws std::runtime_error if there was an error during creation of the semaphore due to causes outside of the program."
    ]
  },
  "methodGroups": [
    {
      "name": "Accessors",
      "items": [
        {
          "name": "gpu",
          "briefDescription": "Returns the gpu that semaphore is on.",
          "overloads": [
            {
              "declaration": "auto gpu() const noexcept -> const gpu_connection&",
              "description": "Returns the gpu that the semaphore is on."
            }
          ],
          "related": [
            "gpu_connection"
          ]
        }
      ]
    },
    {
      "name": "Vulkan-related",
      "description": "These members reveal a lower level of abstractions, and so they should rarely be used.",
      "items": [
        {
          "name": "vulkan_semaphore",
          "briefDescription": "Returns the vulkan_semaphore, representing a VkSemaphore.",
          "overloads": [
            {
              "declaration": "auto vulkan_semaphore() const noexcept -> Private::vulkan_semaphore;",
              "description": "Returns the vulkan_semaphore, representing a VkSemaphore."
            }
          ]
        }
      ]
    }
  ]
}